# this workflow job is used to automate provision resources 
# on Google Cloud with terraform
# author: Marek Chmielowski (based on simple example by Yann Mulonda)

name: 'Terraform CI'
run-name: Deploy by @${{ github.actor }}

on:
  push:
    branches:
    - main
    - terraform
    paths-ignore:
      - README.md
      - CHANGELOG.md # Should never be edited anyway
      - .gitignore
      - .github/**
  pull_request:
    branches:
      - master
      - terraform
      - develop

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  terraform:
    name: 'Provision GCP'
    runs-on: ubuntu-latest
    # environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3 
          
    # GitHub info
    - name: GitHun Info
      run: echo "HitHub github.ref ${{github.ref}} github.event_name ${{github.event_name}} message ${{github.event.commits[0].message}} "

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      
    # # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  id: fmt
    #  run: terraform fmt -check
      # this is the json key of the service account created on the project
    #  env:
    #    GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      
    #- name: Terraform List State
    #  id: list
    #  run: terraform state list
    #  env:
    #    GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
              
      # Shows 
    #- name: Terraform Show
    #  id: show_plan
    #  run: terraform show
    #  env:
    #    GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}  
        
      # On push to terraform branch, build or change infrastructure according to Terraform configuration files
      
    - name: Terraform Plan Failed
      id: fail_exit
      if: steps.plan.outcome == 'failure'
      run: echo "terraform plan FAILED -> will EXIT"; exit 1
      
    # Check if marked [Apply_Changes]
    - name: Check [Apply_Changes]
      run: echo "HitHub message ${{github.event.commits[0].message}} " 
        
    # Apply infrastructure changes
    - name: Terraform Apply
      # If any commit message in your push or the HEAD commit of your PR 
      # contains the strings [Apply_Changes] -- then terraform Apply step will run
      # if: github.ref == 'refs/heads/main' && github.event_name == 'push' && "contains(github.event.commits[0].message, '[Apply_Changes]')"
      # if: "github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'pull_request' ) && contains(github.event.commits[0].message, '[Apply_Changes]')"
      if: "github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.commits[0].message, 'Merge pull request')"
      run: echo "Deploying to GCP"; terraform apply -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
     
    - name: Terraform Destroy
      # If any commit message in your push or the HEAD commit of your PR 
      # contains the strings [Destroy_All] -- then terraform Destroy step will run
      #if: github.ref == 'refs/heads/main' && github.event_name == 'push' && "contains(github.event.commits[0].message, '[Destroy_All]')"
      if: "github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.commits[0].message, '[Destroy_All]')"
      run: terraform apply -destroy -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        
      # Shows 
    #- name: Terraform Show
    #  id: show_final
    #  if: "github.ref == 'refs/heads/main' && github.event_name == 'push'"
    #  run: terraform show
    #  env:
    #    GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
